commit bd0b6b0564ad2d6edb77b1e8a98504532e895351 (HEAD, refs/heads/master)
Author:     P Purkayastha <ppurka@gmail.com>
AuthorDate: Wed Feb 5 13:03:23 2014 +0800
Commit:     P Purkayastha <ppurka@gmail.com>
CommitDate: Wed Feb 5 13:03:23 2014 +0800

    Patch 01/04: Change build system
    
    i) build in non-source directory to avoid stale files
    ii) make install in temporary directory and record old files
    iii) install after deleting all installed files

diff --git a/easy_efl.sh b/easy_efl.sh
index 606e146..919560b 100644
--- a/easy_efl.sh
+++ b/easy_efl.sh
@@ -91,6 +91,8 @@ deps_dev="dbus-1 fontconfig freetype GL jpeg lua|lua5.1 png rsvg-2 udev xml2 X11
 # SCRIPT DEFAULTS, RUN EASY_EFL.SH --HELP TO GET A CLEANER WAY!             #
 #############################################################################
 tmp_path="/tmp/easy_efl"
+tmp_compile_dir="$tmp_path/compile"
+tmp_install_dir="$tmp_path/install"
 logs_path="$tmp_path/install_logs"
 status_path="$tmp_path/status"
 build_path="$tmp_path/build"
@@ -108,6 +110,10 @@ accache=""
 easy_options=""
 command_options=$@
 clean=0
+mkdir -p "$HOME/.config/easy_efl" || {
+    echo >&2 "ERROR: Can not create config directory $HOME/.config/easy_efl"
+    exit 1
+}
 
 animation="star"
 online_source="http://omicron.homeip.net/projects/easy_efl/dev/easy_efl.sh"
@@ -408,6 +414,8 @@ function compile ()
 {
 	name=$1
 	path="$src_path/$name"
+	local curr_dir="$PWD"
+	local installed_files="$HOME/.config/easy_efl/${name}.installed"
 
 	write_name "$name"
 	
@@ -443,6 +451,10 @@ function compile ()
 		set_notification "critical" "Package '$name': sourcedir not found."
 		return
 	fi
+
+	# Copy source files to tmp_compile_dir and change to that directory
+	cp -Rp "$path" "$tmp_compile_dir"
+	path="$tmp_compile_dir/$name"
 	cd "$path"
 
 	rm -f "$status_path/$name.noerrors"
@@ -495,7 +507,7 @@ function compile ()
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 		run_command "$name" "$path" "make"    "make:    " "$mode"    "$make -j $threads"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
-		run_command "$name" "$path" "install" "install: " "rootonly" "$make install"
+		run_command "$name" "$path" "install" "install: " "rootonly" "$make DESTDIR=$tmp_install_dir install"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 	elif [ -e "bootstrap" ]; then
 		run_command "$name" "$path" "bootstrap" "bootstr: " "$mode"    "./bootstrap"
@@ -504,25 +516,25 @@ function compile ()
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 		run_command "$name" "$path" "make"      "make:    " "$mode"    "$make -j $threads"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
-		run_command "$name" "$path" "install"   "install: " "rootonly" "$make install"
+		run_command "$name" "$path" "install"   "install: " "rootonly" "$make DESTDIR=$tmp_install_dir install"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 	elif [ -e "Makefile.PL" ]; then
 		run_command "$name" "$path" "perl"    "perl:    " "$mode"    "perl Makefile.PL prefix=$install_path $args"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 		run_command "$name" "$path" "make"    "make:    " "$mode"    "$make -j $threads"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
-		run_command "$name" "$path" "install" "install: " "rootonly" "$make install"
+		run_command "$name" "$path" "install" "install: " "rootonly" "$make DESTDIR=$tmp_install_dir install"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 	elif [ -e "setup.py" ]; then
 		run_command "$name" "$path" "python"   "python:  " "$mode"    "python setup.py build build_ext --include-dirs=$PYTHONINCLUDE $args"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
-		run_command "$name" "$path" "install"  "install: " "rootonly" "python setup.py install --prefix=$install_path install_headers --install-dir=$PYTHONINCLUDE"
+		run_command "$name" "$path" "install"  "install: " "rootonly" "python setup.py install --root=$tmp_install_dir --prefix=$install_path install_headers --install-dir=$PYTHONINCLUDE"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 	elif [ -e "Makefile" ]; then
 		make_extra="PREFIX=$install_path"
 		run_command "$name" "$path" "make"    "make:    " "$mode"    "$make $make_extra -j $threads"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
-		run_command "$name" "$path" "install" "install: " "rootonly" "$make $make_extra install"
+		run_command "$name" "$path" "install" "install: " "rootonly" "$make $make_extra DESTDIR=$tmp_install_dir install"
 		if [ ! -e "$status_path/$name.noerrors" ] ; then return ; fi
 	elif [ -e "build.sh" ]; then
 		run_command "$name" "$path" "build" "build:     " "$mode"    "./build.sh -i"
@@ -533,6 +545,19 @@ function compile ()
 		touch $status_path/$name.nobuild
 		return
 	fi
+
+	# Now remove the files that were installed previously
+	[ -e "$installed_files" ] && {
+		cat "$installed_files" | xargs rm -f
+	}
+	# Now move the files in $tmp_install_dir to $install_path
+	run_command "$name" "$path" "install" "cp:     " "rootonly"  "cp -Rpf ${tmp_install_dir}${install_path}/* ${install_path}"
+	if [ ! -e "$status_path/$name.noerrors" ] ; then
+		rm -rf "${tmp_install_dir}/${install_path}"
+		return
+	fi
+	# Now update the file which records the installed files
+	find "$tmp_install_dir" -type f -o -type l -o -type s -o -type p | sed -e "s@^${tmp_install_dir}@@" > "$installed_files"
 	
 	if [ "$gen_docs" ]; then
 		if [ -e "gendoc" ]; then
@@ -546,6 +571,9 @@ function compile ()
 	rm -f $status_path/$name.noerrors
 	echo "ok"
 	set_notification "normal" "Package '$name': build successful."
+	rm -rf "${tmp_install_dir}/${install_path}"
+	rm -rf "${tmp_compile_dir}/${name}"
+	cd "$curr_dir"
 }
 
 #############################################################################
@@ -1042,6 +1070,8 @@ set_title "Basic system checks"
 echo -e "\033[1m-------------------------------\033[7m Basic system checks \033[0m\033[1m----------------------------\033[0m"
 echo -n "- creating dirs .... "
 mkdir -p "$tmp_path"		2>/dev/null
+mkdir -p "$tmp_compile_dir"	2>/dev/null
+mkdir -p "$tmp_install_dir"	2>/dev/null
 mkdir -p "$logs_path"		2>/dev/null
 mkdir -p "$status_path"		2>/dev/null
 mkdir -p "$src_path"		2>/dev/null
